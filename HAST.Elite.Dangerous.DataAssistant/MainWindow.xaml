<controls:MetroWindow
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
                      xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                      xmlns:routing="clr-namespace:HAST.Elite.Dangerous.DataAssistant.Routing"
                      xmlns:local="clr-namespace:HAST.Elite.Dangerous.DataAssistant"
                      xmlns:prop="clr-namespace:HAST.Elite.Dangerous.DataAssistant.Properties"
                      xmlns:qc="clr-namespace:QuickConverter;assembly=QuickConverter"
                      xmlns:b="clr-namespace:HAST.Elite.Dangerous.DataAssistant.Behaviors"
                      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                      x:Class="HAST.Elite.Dangerous.DataAssistant.MainWindow"
                      mc:Ignorable="d" ResizeMode="CanResizeWithGrip"
                      DataContext="{Binding ViewModel, Mode=OneWay, RelativeSource={RelativeSource Self}}" 
                      SaveWindowPosition="True" Topmost="True" Background="{DynamicResource WindowBackgroundBrush}"
                      Title="HAST Elite Assistant" Height="420" Width="220" TextOptions.TextFormattingMode="Display"
                      MinHeight="220" MinWidth="220" Icon="Resources/HastHelpingHand.ico" ShowIconOnTitleBar="False">
    <controls:MetroWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Icons.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            <DataTemplate x:Key="DataTemplateRouteNode" DataType="{x:Type routing:IRouteNode}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Text="{Binding System}" ToolTip="{Binding System}" Grid.Column="0" />
                    <TextBlock Text="{Binding Distance, StringFormat=\{0:F2\} LY}" Margin="5,0" Grid.Column="1" />
                </Grid>
            </DataTemplate>
            <ControlTemplate x:Key="ValidationErrorTemplate">
                <DockPanel>
                    <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                        <Grid Width="12" Height="12">
                            <Ellipse Width="12" Height="12" Fill="Red" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            <TextBlock Foreground="White" FontWeight="Heavy" 
            FontSize="8" HorizontalAlignment="Center" 
            VerticalAlignment="Center" TextAlignment="Center"
                       ToolTip="{Binding ElementName=ErrorAdorner, 
                       Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"
                       >X</TextBlock>
                        </Grid>
                        <TextBlock Margin="2,0,0,0" Background="{DynamicResource ControlBackgroundBrush}" Foreground="{DynamicResource ValidationTextBrush}"
                   Text="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
                    </StackPanel>
                    <Border BorderBrush="Red" BorderThickness="1">
                        <AdornedElementPlaceholder x:Name="ErrorAdorner" />
                    </Border>
                </DockPanel>
            </ControlTemplate>
        </ResourceDictionary>
    </controls:MetroWindow.Resources>
    <controls:MetroWindow.InputBindings>
        <KeyBinding Gesture="F20" Command="{Binding SpeakNextSystemCommand}"
                    HotkeyManager.RegisterGlobalHotkey="True" />
        <KeyBinding Gesture="F22" Command="{Binding AvoidNextSystemCommand}"
                    HotkeyManager.RegisterGlobalHotkey="True" />
        <KeyBinding Gesture="F23" Command="{Binding RoutePlanner.SwapSystemsCommand}"
                    HotkeyManager.RegisterGlobalHotkey="True" />
    </controls:MetroWindow.InputBindings>
    <controls:MetroWindow.RightWindowCommands>
        <controls:WindowCommands>
            <Button Command="{Binding ToggleSettingsFlyoutCommand}">
                <Rectangle Width="10"
               Height="10"
               Fill="{DynamicResource BlackBrush}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Fill"
                         Visual="{DynamicResource appbar_settings}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>
            <ToggleButton Command="{Binding ToggleTopmostCommand}" Width="30"
                Height="30" ToolTip="Pin Window Topmost"
                Style="{DynamicResource MetroCircleToggleButtonStyle}" IsChecked="True">
                <Rectangle Width="20"
               Height="20"
               Fill="{DynamicResource BlackBrush}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="Fill"
                         Visual="{DynamicResource appbar_pin}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </ToggleButton>
        </controls:WindowCommands>
    </controls:MetroWindow.RightWindowCommands>
    <controls:MetroWindow.Flyouts>
        <controls:FlyoutsControl>
            <controls:Flyout x:Name="SettingsFlyout" CloseCommand="{Binding SaveSettingsCommand}"
                             Margin="0 0 0 0"
                             Width="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=controls:MetroWindow}, Path=ActualWidth}"
                             Header="Settings"
                             Position="Right"
                             AnimateOpacity="True">
                <StackPanel Orientation="Vertical">
                    <TextBlock Text="{Binding SystemNames.Count, StringFormat='{}{0} systems known.'}" Margin="3" />
                    <xctk:PropertyGrid x:Name="PropertyGrid" SelectedObjectName=""
                                       SelectedObject="{Binding Source={x:Static prop:Settings.Default}}"
                                       Foreground="{DynamicResource TextBrush}"
                                       Background="{DynamicResource ControlBackgroundBrush}"
                                       ShowAdvancedOptions="False" ShowSummary="True" ShowTitle="False"
                                       ShowSearchBox="False"
                                       ShowPreview="False" ShowSortOptions="False" IsCategorized="False"
                                       AutoGenerateProperties="False">
                        <xctk:PropertyGrid.PropertyDefinitions>
                            <xctk:PropertyDefinition DisplayOrder="1" TargetProperties="AutoCopyNextSystem" DisplayName="Auto copy next system" Description="When set as you jump the next system will be copied to the clipboard." />
                            <xctk:PropertyDefinition DisplayOrder="2" TargetProperties="SpeakNextSystemDuringJump" DisplayName="Speak next system" Description="When set as you jump the next system will spoken via Window Text-to-Speech." />
                            <xctk:PropertyDefinition DisplayOrder="3" TargetProperties="RepeatNextSystemAfter" DisplayName="Repeat next system after" Description="When set the next system will be spoken again via TTS after this many seconds.  Set it to 0 to disable." />
                            <xctk:PropertyDefinition DisplayOrder="4" TargetProperties="AvoidSystems" DisplayName="Avoid systems" Description="A comma separated list of systems to avoid when planning a route." />
                            <xctk:PropertyDefinition DisplayOrder="5" TargetProperties="RememberLastUsed" DisplayName="Remember Last Used" Description="When set the last route used will be remembered when you launch the application." Category="Advanced" />
                            <xctk:PropertyDefinition DisplayOrder="6" TargetProperties="SystemsJsonUri" DisplayName="systems.json Url" Category="Advanced" />
                            <xctk:PropertyDefinition DisplayOrder="7" TargetProperties="LogsFullPath" DisplayName="Full path to netLog files" Category="Advanced" />
                            <!--<xctk:PropertyDefinition TargetProperties="EDDNUri" />-->
                        </xctk:PropertyGrid.PropertyDefinitions>
                    </xctk:PropertyGrid>
                </StackPanel>
            </controls:Flyout>
        </controls:FlyoutsControl>
    </controls:MetroWindow.Flyouts>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>
        <WrapPanel Grid.Row="0">
            <Button Command="{Binding RoutePlanner.SwapSystemsCommand}" ToolTip="Swap Source/Destination" 
                    VerticalAlignment="Center" Padding="3" Margin="3,3,3,0" Style="{DynamicResource SquareButtonStyle}">
                <Rectangle Width="20" Height="20"
            		Fill="{DynamicResource BlackBrush}">
                    <Rectangle.OpacityMask>
                        <VisualBrush Stretch="UniformToFill"
            				Visual="{DynamicResource appbar_arrow_up_down}"/>
                    </Rectangle.OpacityMask>
                </Rectangle>
            </Button>
            <Grid Height="25" Width="130">
                <Label Target="{Binding ElementName=DecimalUpDown}" Content="_Jump Range" VerticalContentAlignment="Center" VerticalAlignment="Center"/>
                <xctk:DecimalUpDown FormatString="F2" Value="{Binding RoutePlanner.JumpRange}" x:Name="DecimalUpDown" Foreground="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" VerticalAlignment="Center" HorizontalAlignment="Right" Padding="0" />
            </Grid>
            <Grid Width="210">
                <Label Target="{Binding ElementName=SourceAutoCompleteBox}" Content="_S" ToolTip="Source" VerticalContentAlignment="Center"/>
                <xctk:AutoSelectTextBox x:Name="SourceAutoCompleteBox"
					Text="{Binding RoutePlanner.Source, ValidatesOnExceptions=True}" Validation.ErrorTemplate="{StaticResource ValidationErrorTemplate}"
                    Margin="18,0,3,0" b:AutoCompleteBehavior.AutoCompleteItemsSource="{Binding SystemNames}"
					AutoSelectBehavior="OnFocus" AutoMoveFocus="True" VerticalAlignment="Center">
                </xctk:AutoSelectTextBox>
            </Grid>
            <Grid Width="210">
                <Label Target="{Binding ElementName=DestinationAutoCompleteBox}" Content="_D" ToolTip="Destination" VerticalContentAlignment="Center"/>
                <xctk:AutoSelectTextBox x:Name="DestinationAutoCompleteBox" b:AutoCompleteBehavior.AutoCompleteItemsSource="{Binding SystemNames}"
                                        Margin="18,0,3,0" Validation.ErrorTemplate="{StaticResource ValidationErrorTemplate}"
					Text="{Binding RoutePlanner.Destination, ValidatesOnExceptions=True}" AutoSelectBehavior="OnFocus" AutoMoveFocus="True" VerticalAlignment="Center" />
            </Grid>
        </WrapPanel>
        <StackPanel Orientation="Horizontal" Visibility="{Binding RoutePlanner.WasRouteFound, Converter={StaticResource BooleanToVisibilityConverter}}" Background="{DynamicResource AccentColorBrush4}" Grid.Row="1">
            <TextBlock Text="{Binding RoutePlanner.NumberOfJumps, StringFormat='Found {0} jumps'}" Margin="3,0,0,0"/>
            <TextBlock Text="{Binding RoutePlanner.Distance, StringFormat='over {0:F2} LY'}" Margin="3,0">
                <TextBlock.ToolTip>
                    <TextBlock Text="{Binding RoutePlanner.CalculationTime.TotalMilliseconds, StringFormat='{}{0:F2}ms taken'}"/>
                </TextBlock.ToolTip> 
            </TextBlock>
        </StackPanel>
        <StackPanel Orientation="Horizontal" Visibility="{qc:Binding '$P ? Visibility.Collapsed : Visibility.Visible', P={Binding RoutePlanner.WasRouteFound}}" Background="{DynamicResource AccentColorBrush4}" Grid.Row="1">
            <TextBlock Text="Try upgrading your jump drive!"/>
        </StackPanel>
        <!--<Button Command="{Binding RoutePlanner.CalculateRouteCommand}" Margin="3" Content="_Route" Width="90" IsDefault="True"/>-->
        <ListBox DataContext="{Binding RoutePlanner}" ItemsSource="{Binding Route}" ItemTemplate="{StaticResource DataTemplateRouteNode}" Grid.Row="2" SelectedItem="{Binding SelectedRouteNode}" Background="Transparent" />
        <StatusBar Grid.Row="3" x:Name="StatusBar">
            <StatusBarItem>
                <Grid>
                    <TextBlock Text="{Binding LogWatcher.CurrentSystem}" x:Name="CurrentSytstemTextBlock" ToolTip="Click to set as Source System." />
                    <Button Command="{Binding SetSourceToCurrentCommand}" Width="{Binding ActualWidth, ElementName=CurrentSytstemTextBlock, Mode=OneWay}" Height="{Binding ActualHeight, ElementName=CurrentSytstemTextBlock, Mode=OneWay}" Opacity="0" />
                </Grid>
            </StatusBarItem>
            <StatusBarItem>
                <StackPanel Orientation="Vertical">
                    <Slider Minimum="0.0" Maximum="1"
                            Value="{Binding BackgroundOpacity}"
                            LargeChange="0.1" SmallChange="0.01" Width="120" Style="{DynamicResource FlatSlider}"
                            ToolTip="Adjusts background transparency." />
                    <Slider Minimum="0.2" Maximum="1"
                            Value="{Binding Opacity, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}"
                            LargeChange="0.1" SmallChange="0.01" Width="120" Style="{DynamicResource FlatSlider}"
                            ToolTip="Adjusts overall window transparency." />
                </StackPanel>
            </StatusBarItem>
        </StatusBar>
    </Grid>
</controls:MetroWindow>
